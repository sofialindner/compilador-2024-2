package gals;

public interface ParserConstants
{
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL    = 36;
    int FIRST_SEMANTIC_ACTION = 70;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  3, -1, -1, -1, -1,  2,  3, -1, -1, -1, -1,  3,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  4, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1,  5,  6,  6,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, 10, -1, -1 },
        { -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 12, 12, -1, -1 },
        { -1, -1, 14, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, 15, 16, 16, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 21, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 23 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 27, 27, 27, 27, -1, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, 27, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, 28 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 32, -1, 31, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 36, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 36, 36, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 38, -1, -1, -1, -1, 37, 38, 37, 37, -1, -1, 38, 38, 38, 38, 37, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 42, 42, 42, 42, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, 42, -1 },
        { -1, -1, 43, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, 43, 43, 43, 43, -1, -1, 44, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, 43 },
        { -1, -1, 46, 46, 46, 46, -1, -1, -1, -1, -1, 48, 47, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, 46, -1 },
        { -1, -1, 50, 50, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, 50, -1 },
        { -1, -1, 51, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, 51, 51, 51, 51, -1, -1, 51, 51, -1, 52, 52, 52, 52, -1, -1, -1, -1, 51, 51, -1, -1, 51 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 54, 55, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, 57, -1 },
        { -1, -1, 58, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, 58, 58, 58, 58, -1, -1, 58, 58, -1, 58, 58, 58, 58, 59, 60, -1, -1, 58, 58, -1, -1, 58 },
        { -1, -1, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, 61, -1 },
        { -1, -1, 62, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, 62, 62, 62, 62, -1, -1, 62, 62, -1, 62, 62, 62, 62, 62, 62, 63, 64, 62, 62, -1, -1, 62 },
        { -1, -1, 65, 66, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 71, -1, -1, -1, -1, -1, 69, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 170,   7,  37,   8, 171 },
        {  39,  32,  38 },
        {   0 },
        {  37 },
        {  41,  40 },
        {  45 },
        {  48 },
        {  51 },
        {  57 },
        { 172 },
        {  33,  59, 173 },
        {   3, 174,  42 },
        {   0 },
        {  31,  41 },
        {  44 },
        {  45 },
        {  48 },
        {  51 },
        {  57 },
        {  41,  33,  59, 173 },
        {  14,  34,  46,  35 },
        {   3, 175,  47 },
        {   6, 176,  31,   3, 175,  47 },
        {   0 },
        {  31,  46 },
        {  15,  34,  49,  35 },
        {  16,  34,  49,  35, 177 },
        {  59, 178,  50 },
        {   0 },
        {  31,  49 },
        {   9,  59, 179,  55,  52, 180,  54, 181,   8 },
        {  53,  52 },
        {   0 },
        { 180,  10,  59, 182,  55 },
        {  11,  55 },
        {   0 },
        {  43,  32,  56 },
        {   0 },
        {  55 },
        { 183,  17,  55,  58 },
        {  19,  59, 184 },
        {  18,  59, 185 },
        {  61,  60 },
        {   0 },
        {  20,  61, 186,  60 },
        {  21,  61, 187,  60 },
        {  62 },
        {  13, 188 },
        {  12, 189 },
        {  22,  61, 190 },
        {  65,  63 },
        {   0 },
        {  64, 191,  65, 192 },
        {  23 },
        {  24 },
        {  25 },
        {  26 },
        {  67,  66 },
        {   0 },
        {  27,  67, 193,  66 },
        {  28,  67, 194,  66 },
        {  69,  68 },
        {   0 },
        {  29,  69, 195,  68 },
        {  30,  69, 196,  68 },
        {   3, 197 },
        {   4, 198 },
        {   5, 199 },
        {   6, 200 },
        {  34,  59,  35 },
        {  27,  69 },
        {  28,  69, 201 }
    };

    String[] PARSER_ERROR =
    {
            "",
            "esperado EOF", //"Era esperado fim de programa",
            "esperado palavra reservada", // "Era esperado pr"
            "esperado identificador", //"Era esperado id",
            "esperado constante_int", //"Era esperado cte_int",
            "esperado constante_float", //"Era esperado cte_float",
            "esperado constante_string", //"Era esperado cte_string",
            "esperado main", //"Era esperado main",
            "esperado end", //"Era esperado end",
            "esperado if", // "Era esperado if",
            "esperado elif", // "Era esperado elif",
            "esperado else", // "Era esperado else",
            "esperado false", // "Era esperado false",
            "esperado true", // "Era esperado true",
            "esperado read", // "Era esperado read",
            "esperado write", // "Era esperado write",
            "esperado writeln", // "Era esperado writeln",
            "esperado repeat", // "Era esperado repeat",
            "esperado until", // "Era esperado until",
            "esperado while", // "Era esperado while",
            "esperado &&", // "Era esperado \"&&\"",
            "esperado ||", // "Era esperado \"||\"",
            "esperado !", // "Era esperado \"!\"",
            "esperado ==", // "Era esperado \"==\"",
            "esperado !=", // "Era esperado \"!=\"",
            "esperado <", // "Era esperado \"<\"",
            "esperado >", // "Era esperado \">\"",
            "esperado +", // "Era esperado \"+\"",
            "esperado -", // "Era esperado \"-\"",
            "esperado *", // "Era esperado \"*\"",
            "esperado /", // "Era esperado \"/\"",
            "esperado ,", // "Era esperado \",\"",
            "esperado ;", // "Era esperado \";\"",
            "esperado =", // "Era esperado \"=\"",
            "esperado (", // "Era esperado \"(\"",
            "esperado )", // "Era esperado \")\"",
            "esperado main", // "<programa> inválido",
            "esperado identificador  if  read  write  writeln  repeat", // "<lista_instrucao> inválido",
            "esperado identificador end  if  read  write  writeln  repeat", // "<lista_instrucao1> inválido",
            "esperado identificador  if  read  write  writeln  repeat", // "<instrucao> inválido",
            "esperado ;  =", // "<instrucao1> inválido",
            "esperado identificador", // "<lista_id> inválido",
            "esperado ,  ;  =", // "<lista_id1> inválido",
            "esperado identificador  if  read  write  writeln  repeat", // "<comando> inválido",
            "esperado identificador", // "<cmd_atribuicao> inválido",
            "esperado read", // "<cmd_entrada> inválido",
            "esperado identificador  constante_string", // "<lista_entrada> inválido",
            "esperado ,  )", // "<lista_entrada1> inválido",
            "esperado write  writeln", // "<cmd_saida> inválido",
            "esperado expressao", // "<lista_expressao> inválido",
            "esperado ,  )", // "<lista_expressao1> inválido",
            "esperado if", // "<cmd_selecao> inválido",
            "esperado end  elif  else", // "<rep_elif> inválido",
            "esperado elif", // "<elif> inválido",
            "esperado end  else", //        "<else> inválido",
            "esperado identificador  if  read  write  writeln  repeat", // "<lista_comando> inválido",
            "esperado identificador  end  if  elif  else  read  write  writeln  repeat  until  while", // "<lista_comando1> inválido",
            "esperado repeat", // "<cmd_repeticao> inválido",
            "esperado until  while", // "<condicao_loop> inválido",
            "esperado expressao", // "<expressao> inválido",
            "esperado expressao", // "<expressao1> inválido",
            "esperado expressao", // "<elemento> inválido",
            "esperado expressao", // "<relacional> inválido",
            "esperado expressao", // "<relacional1> inválido",
            "esperado ==  !=  <  >", // "<operador_relacional> inválido",
            "esperado expressao", // "<aritmetica> inválido",
            "esperado expressao", // "<aritmetica1> inválido",
            "esperado expressao", // "<termo> inválido",
            "esperado expressao", // "<termo1> inválido",
            "esperado expressao"  // "<fator> inválido"
    };
}
